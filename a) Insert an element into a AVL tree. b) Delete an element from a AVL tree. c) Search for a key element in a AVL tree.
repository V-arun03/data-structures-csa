#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct AVLNode
{
  int key;
  int height;
  struct AVLNode *left;
  struct AVLNode *right;
} AVLNode;

int height(AVLNode *node)
{
  if (node == NULL)
    return 0;
  return node->height;
}

int max(int a, int b)
{
  return (a > b) ? a : b;
}

AVLNode *newNode(int key)
{
  AVLNode *node = (AVLNode *)malloc(sizeof(AVLNode));
  node->key = key;
  node->height = 1;
  node->left = NULL;
  node->right = NULL;
  return node;
}

AVLNode *rightRotate(AVLNode *y)
{
  AVLNode *x = y->left;
  AVLNode *T2 = x->right;
  x->right = y;
  y->left = T2;
  y->height = max(height(y->left), height(y->right)) + 1;
  x->height = max(height(x->left), height(x->right)) + 1;
  return x;
}

AVLNode *leftRotate(AVLNode *x)
{
  AVLNode *y = x->right;
  AVLNode *T2 = y->left;
  y->left = x;
  x->right = T2;
  x->height = max(height(x->left), height(x->right)) + 1;
  y->height = max(height(y->left), height(y->right)) + 1;
  return y;
}

int getBalance(AVLNode *node)
{
  if (node == NULL)
    return 0;
  return height(node->left) - height(node->right);
}

AVLNode *insert(AVLNode *node, int key)
{
  if (node == NULL)
    return newNode(key);
  if (key < node->key)
    node->left = insert(node->left, key);
  else if (key > node->key)
    node->right = insert(node->right, key);
  else
    return node;
  node->height = 1 + max(height(node->left), height(node->right));
  int balance = getBalance(node);
  if (balance > 1 and key < node->left->key)
    return rightRotate(node);
  if (balance < -1 and key > node->right->key)
    return leftRotate(node);
  if (balance > 1 and key > node->left->key)
  {
    node->left = leftRotate(node->left);
    return rightRotate(node);
  }
  if (balance < -1 and key < node->right->key)
  {
    node->right = rightRotate(node->right);
    return leftRotate(node);
  }
  return node;
}

AVLNode *minValueNode(AVLNode *node)
{
  AVLNode *current = node;
  while (current->left != NULL)
    current = current->left;
  return current;
}

AVLNode *deleteNode(AVLNode *root, int key)
{
  if (root == NULL)
    return root;
  if (key < root->key)
    root->left = deleteNode(root->left, key);
  else if (key > root->key)
    root->right = deleteNode(root->right, key);
  else
  {
    if ((root->left == NULL) || (root->right == NULL))
    {
      AVLNode *temp = root->left ? root->left : root->right;
      if (temp == NULL)
      {
        temp = root;
        root = NULL;
      }
      else
        *root = *temp;
      free(temp);
    }
    else
    {
      AVLNode *temp = minValueNode(root->right);
      root->key = temp->key;
      root->right = deleteNode(root->right, temp->key);
    }
  }
  if (root == NULL)
    return root;
  root->height = 1 + max(height(root->left), height(root->right));
  int balance = getBalance(root);
  if (balance > 1 and getBalance(root->left) >= 0)
    return rightRotate(root);
  if (balance > 1 and getBalance(root->left) < 0)
  {
    root->left = leftRotate(root->left);
    return rightRotate(root);
  }
  if (balance < -1 and getBalance(root->right) <= 0)
    return leftRotate(root);
  if (balance < -1 and getBalance(root->right) > 0)
  {
    root->right = rightRotate(root->right);
    return leftRotate(root);
  }
  return root;
}

bool search(AVLNode *root, int key)
{
  while (root != NULL)
  {
    if (key > root->key)
      root = root->right;
    else if (key < root->key)
      root = root->left;
    else
      return true;
  }
  return false;
}

void preOrder(AVLNode *root)
{
  if (root != NULL)
  {
    printf("%d ", root->key);
    preOrder(root->left);
    preOrder(root->right);
  }
}

int main()
{
  AVLNode *root = NULL;
  root = insert(root, 10);
  root = insert(root, 20);
  root = insert(root, 30);
  root = insert(root, 40);
  root = insert(root, 50);
  root = insert(root, 25);
  printf("Preorder traversal of the constructed AVL tree is \n");
 
